{"uid":"934fe0bfa3b2c9ed","name":"test_valid_promo_whitespace_padding","fullName":"tests.pytest.test_mars_air#test_valid_promo_whitespace_padding","historyId":"2b8bd460a2975b56fbfdd039ce8d4cb1","time":{"start":1709811190052,"stop":1709811190825,"duration":773},"status":"failed","statusMessage":"AssertionError: expected is \"Promotional code XX5-XXX-005 used: 50% discount!\", but actual is \"Promotional code   XX5-XXX-005    used: 00% discount!\"\nassert 'Promotional ...00% discount!' == 'Promotional ...50% discount!'\n  \n  - Promotional code XX5-XXX-005 used: 50% discount!\n  ?                                    ^\n  + Promotional code   XX5-XXX-005    used: 00% discount!\n  ?                 ++             +++      ^","statusTrace":"request = <FixtureRequest for <Function test_valid_promo_whitespace_padding>>\nseat_available = ['departing=0', 'returning=5']\n\n    def test_valid_promo_whitespace_padding(request, seat_available):\n>       execute(data=['promotional_code=  XX5-XXX-005   '],\n                expected=['Seats available!', 'Promotional code XX5-XXX-005 used: 50% discount!',\n                          'Call now on 0800 MARSAIR to book!', 'Back'],\n                precondition=seat_available,\n                request=request)\n\ntests\\pytest\\test_mars_air.py:113: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndata = ['promotional_code=  XX5-XXX-005   ', 'departing=0', 'returning=5']\nexpected = ['Seats available!', 'Promotional code XX5-XXX-005 used: 50% discount!', 'Call now on 0800 MARSAIR to book!', 'Back']\nprecondition = ['departing=0', 'returning=5']\nrequest = <FixtureRequest for <Function test_valid_promo_whitespace_padding>>\n\n    def execute(data: list, expected: list, precondition=None, request=None):\n        # act\n        session, url = request.getfixturevalue('session')\n        if precondition:\n            data.extend(precondition)\n        response = session.post(url, data='&'.join([v for v in data]))\n        soup = BeautifulSoup(response.text, features='html.parser')\n        # assert\n        assert 200 == response.status_code\n        actual_lst = soup.find('div', {'id': 'content'}).find_all('p')\n        for i, actual in enumerate(actual_lst):\n            exp, act = expected[i], actual.get_text().strip()\n>           assert act == exp, f'expected is \"{exp}\", but actual is \"{act}\"'\nE           AssertionError: expected is \"Promotional code XX5-XXX-005 used: 50% discount!\", but actual is \"Promotional code   XX5-XXX-005    used: 00% discount!\"\nE           assert 'Promotional ...00% discount!' == 'Promotional ...50% discount!'\nE             \nE             - Promotional code XX5-XXX-005 used: 50% discount!\nE             ?                                    ^\nE             + Promotional code   XX5-XXX-005    used: 00% discount!\nE             ?                 ++             +++      ^\n\ntests\\pytest\\test_mars_air.py:27: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1709811187217,"stop":1709811187217,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"pytestconfig","time":{"start":1709811187217,"stop":1709811187217,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"_verify_url","time":{"start":1709811187217,"stop":1709811187217,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"session","time":{"start":1709811187218,"stop":1709811187218,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"seat_available","time":{"start":1709811187218,"stop":1709811187218,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1709811187218,"stop":1709811187218,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false}],"afterStages":[{"name":"session::0","time":{"start":1709811191452,"stop":1709811191452,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.pytest"},{"name":"suite","value":"test_mars_air"},{"name":"host","value":"DESKTOP-ILHPRQN"},{"name":"thread","value":"17880-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.pytest.test_mars_air"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"934fe0bfa3b2c9ed.json","parameterValues":[]}