{"uid":"9caa1f6b113077eb","name":"test_invalid_returning_date_earlier_than_departing","fullName":"tests.pytest.test_mars_air#test_invalid_returning_date_earlier_than_departing","historyId":"e451275e27a9511acadf0cad5db007b9","time":{"start":1709811190075,"stop":1709811190822,"duration":747},"status":"failed","statusMessage":"AssertionError: expected is \"Unfortunately, this schedule is not possible. Please try again.\", but actual is \"Sorry, there are no more seats available.\"\nassert 'Sorry, there...ts available.' == 'Unfortunatel...se try again.'\n  \n  - Unfortunately, this schedule is not possible. Please try again.\n  + Sorry, there are no more seats available.","statusTrace":"request = <FixtureRequest for <Function test_invalid_returning_date_earlier_than_departing>>\nempty_promo_code = ['promotional_code=']\n\n    def test_invalid_returning_date_earlier_than_departing(request, empty_promo_code):\n>       execute(data=['departing=5', 'returning=0'],\n                expected=['Unfortunately, this schedule is not possible. Please try again.', 'Back'],\n                precondition=empty_promo_code,\n                request=request)\n\ntests\\pytest\\test_mars_air.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndata = ['departing=5', 'returning=0', 'promotional_code=']\nexpected = ['Unfortunately, this schedule is not possible. Please try again.', 'Back']\nprecondition = ['promotional_code=']\nrequest = <FixtureRequest for <Function test_invalid_returning_date_earlier_than_departing>>\n\n    def execute(data: list, expected: list, precondition=None, request=None):\n        # act\n        session, url = request.getfixturevalue('session')\n        if precondition:\n            data.extend(precondition)\n        response = session.post(url, data='&'.join([v for v in data]))\n        soup = BeautifulSoup(response.text, features='html.parser')\n        # assert\n        assert 200 == response.status_code\n        actual_lst = soup.find('div', {'id': 'content'}).find_all('p')\n        for i, actual in enumerate(actual_lst):\n            exp, act = expected[i], actual.get_text().strip()\n>           assert act == exp, f'expected is \"{exp}\", but actual is \"{act}\"'\nE           AssertionError: expected is \"Unfortunately, this schedule is not possible. Please try again.\", but actual is \"Sorry, there are no more seats available.\"\nE           assert 'Sorry, there...ts available.' == 'Unfortunatel...se try again.'\nE             \nE             - Unfortunately, this schedule is not possible. Please try again.\nE             + Sorry, there are no more seats available.\n\ntests\\pytest\\test_mars_air.py:27: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1709811187217,"stop":1709811187218,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"_verify_url","time":{"start":1709811187217,"stop":1709811187217,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"base_url","time":{"start":1709811187217,"stop":1709811187217,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"session","time":{"start":1709811187218,"stop":1709811187218,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"empty_promo_code","time":{"start":1709811187218,"stop":1709811187218,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1709811187218,"stop":1709811187218,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false}],"afterStages":[{"name":"session::0","time":{"start":1709811190837,"stop":1709811190837,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.pytest"},{"name":"suite","value":"test_mars_air"},{"name":"host","value":"DESKTOP-ILHPRQN"},{"name":"thread","value":"18468-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.pytest.test_mars_air"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"9caa1f6b113077eb.json","parameterValues":[]}